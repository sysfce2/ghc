
==================== Specialise ====================
Result size of Specialise
  = {terms: 162, types: 155, coercions: 10, joins: 0/0}

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dShow_sTQ :: Show (Maybe Integer)
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=False, ConLike=True, WorkFree=False, Expandable=True,
         Guidance=IF_ARGS [] 20 0}]
$dShow_sTQ = GHC.Show.$fShowMaybe @Integer GHC.Show.$fShowInteger

-- RHS size: {terms: 28, types: 22, coercions: 0, joins: 0/0}
$s$cm_sTX [InlPrag=INLINABLE[0]]
  :: Bool -> () -> Maybe Integer -> [Char]
[LclId, Arity=3]
$s$cm_sTX
  = \ (a_aD5 :: Bool) (b_aD6 :: ()) (c_aD7 :: Maybe Integer) ->
      GHC.Base.augment
        @Char
        (\ (@b_aSj)
           (c_aSk [OS=OneShot] :: Char -> b_aSj -> b_aSj)
           (n_aSl [OS=OneShot] :: b_aSj) ->
           GHC.Base.foldr
             @Char
             @b_aSj
             c_aSk
             n_aSl
             (case a_aD5 of {
                False -> GHC.Show.$fShowBool5;
                True -> GHC.Show.$fShowBool4
              }))
        (GHC.Base.augment
           @Char
           (\ (@b_aSj)
              (c_aSk [OS=OneShot] :: Char -> b_aSj -> b_aSj)
              (n_aSl [OS=OneShot] :: b_aSj) ->
              GHC.Base.foldr
                @Char @b_aSj c_aSk n_aSl (GHC.Show.$fShowUnit_$cshow b_aD6))
           (GHC.Show.$fShowMaybe_$cshow
              @Integer GHC.Show.$fShowInteger c_aD7))

-- RHS size: {terms: 33, types: 28, coercions: 0, joins: 0/0}
$cm_aJa [InlPrag=INLINABLE[0]]
  :: forall b c. (Show b, Show c) => Bool -> b -> c -> String
[LclId,
 Arity=5,
 Unf=Unf{Src=StableUser, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 0 0] 140 0
         Tmpl= \ (@b_aJ7)
                 ($dShow_aJ8 [Occ=Once1] :: Show b_aJ7)
                 (@c_aJd)
                 ($dShow_aJe [Occ=Once1] :: Show c_aJd)
                 (a_aD5 [Occ=Once1!] :: Bool)
                 (b_aD6 [Occ=Once1] :: b_aJ7)
                 (c_aD7 [Occ=Once1] :: c_aJd) ->
                 ++
                   @Char
                   (case a_aD5 of {
                      False -> GHC.Show.$fShowBool5;
                      True -> GHC.Show.$fShowBool4
                    })
                   (++
                      @Char
                      (show @b_aJ7 $dShow_aJ8 b_aD6)
                      (show @c_aJd $dShow_aJe c_aD7))},
 RULES: "SPEC $cm @() @(Maybe Integer)" [0]
            forall ($dShow_sTS :: Show ())
                   ($dShow_sTT :: Show (Maybe Integer)).
              $cm_aJa @() $dShow_sTS @(Maybe Integer) $dShow_sTT
              = $s$cm_sTX]
$cm_aJa
  = \ (@b_aJ7)
      ($dShow_aJ8 :: Show b_aJ7)
      (@c_aJd)
      ($dShow_aJe :: Show c_aJd)
      (a_aD5 :: Bool)
      (b_aD6 :: b_aJ7)
      (c_aD7 :: c_aJd) ->
      GHC.Base.augment
        @Char
        (\ (@b_aSj)
           (c_aSk [OS=OneShot] :: Char -> b_aSj -> b_aSj)
           (n_aSl [OS=OneShot] :: b_aSj) ->
           GHC.Base.foldr
             @Char
             @b_aSj
             c_aSk
             n_aSl
             (case a_aD5 of {
                False -> GHC.Show.$fShowBool5;
                True -> GHC.Show.$fShowBool4
              }))
        (GHC.Base.augment
           @Char
           (\ (@b_aSj)
              (c_aSk [OS=OneShot] :: Char -> b_aSj -> b_aSj)
              (n_aSl [OS=OneShot] :: b_aSj) ->
              GHC.Base.foldr
                @Char @b_aSj c_aSk n_aSl (show @b_aJ7 $dShow_aJ8 b_aD6))
           (show @c_aJd $dShow_aJe c_aD7))

-- RHS size: {terms: 1, types: 0, coercions: 10, joins: 0/0}
T17966.$fCBoolb [InlPrag=CONLIKE] :: forall b. Show b => C Bool b
[LclIdX[DFunId(nt)],
 Arity=5,
 Unf=DFun: \ (@b_anK) (v_B1 :: Show b_anK) ->
       T17966.C:C TYPE: Bool TYPE: b_anK $cm_aJa @b_anK v_B1]
T17966.$fCBoolb
  = $cm_aJa
    `cast` (forall (b :: <*>_N).
            <Show b>_R %<Many>_N ->_R Sym (T17966.N:C[0] <Bool>_N <b>_N)
            :: (forall {b} c. (Show b, Show c) => Bool -> b -> c -> String)
               ~R# (forall {b}. Show b => C Bool b))

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dC_sTP :: C Bool ()
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 20 60}]
$dC_sTP = T17966.$fCBoolb @() GHC.Show.$fShowUnit

-- RHS size: {terms: 19, types: 16, coercions: 0, joins: 0/0}
$sf_sTR [InlPrag=INLINABLE[0]]
  :: Bool -> () -> Maybe Integer -> [Char]
[LclId, Arity=3]
$sf_sTR
  = \ (a_aDe :: Bool) (b_aDf :: ()) (c_aDg :: Maybe Integer) ->
      GHC.Base.build
        @Char
        (\ (@b_aSC)
           (c_aSD [OS=OneShot] :: Char -> b_aSC -> b_aSC)
           (n_aSE [OS=OneShot] :: b_aSC) ->
           GHC.Base.foldr
             @Char
             @b_aSC
             c_aSD
             (GHC.CString.unpackFoldrCString# @b_aSC "!"# c_aSD n_aSE)
             ($cm_aJa
                @()
                GHC.Show.$fShowUnit
                @(Maybe Integer)
                $dShow_sTQ
                a_aDe
                b_aDf
                c_aDg))

-- RHS size: {terms: 24, types: 23, coercions: 0, joins: 0/0}
f [InlPrag=INLINABLE[0]]
  :: forall a b c. (C a b, Show c) => a -> b -> c -> String
[LclIdX,
 Arity=5,
 Unf=Unf{Src=StableUser, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 0 0 0 0] 130 0
         Tmpl= \ (@a_aF9)
                 (@b_aFa)
                 (@c_aFb)
                 ($dC_aFc [Occ=Once1] :: C a_aF9 b_aFa)
                 ($dShow_aFd [Occ=Once1] :: Show c_aFb)
                 (a_aDe [Occ=Once1] :: a_aF9)
                 (b_aDf [Occ=Once1] :: b_aFa)
                 (c_aDg [Occ=Once1] :: c_aFb) ->
                 ++
                   @Char
                   (m @a_aF9 @b_aFa $dC_aFc @c_aFb $dShow_aFd a_aDe b_aDf c_aDg)
                   (GHC.CString.unpackCString# "!"#)},
 RULES: "SPEC f @Bool @() @(Maybe Integer)" [0]
            forall ($dC_sTP :: C Bool ()) ($dShow_sTQ :: Show (Maybe Integer)).
              f @Bool @() @(Maybe Integer) $dC_sTP $dShow_sTQ
              = $sf_sTR]
f = \ (@a_aF9)
      (@b_aFa)
      (@c_aFb)
      ($dC_aFc :: C a_aF9 b_aFa)
      ($dShow_aFd :: Show c_aFb)
      (a_aDe :: a_aF9)
      (b_aDf :: b_aFa)
      (c_aDg :: c_aFb) ->
      GHC.Base.build
        @Char
        (\ (@b_aSC)
           (c_aSD [OS=OneShot] :: Char -> b_aSC -> b_aSC)
           (n_aSE [OS=OneShot] :: b_aSC) ->
           GHC.Base.foldr
             @Char
             @b_aSC
             c_aSD
             (GHC.CString.unpackFoldrCString# @b_aSC "!"# c_aSD n_aSE)
             (m @a_aF9 @b_aFa $dC_aFc @c_aFb $dShow_aFd a_aDe b_aDf c_aDg))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sTJ :: GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 20 0}]
$trModule_sTJ = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sTK :: GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
$trModule_sTK = GHC.Types.TrNameS $trModule_sTJ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sTL :: GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 30 0}]
$trModule_sTL = "T17966"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sTM :: GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
$trModule_sTM = GHC.Types.TrNameS $trModule_sTL

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
T17966.$trModule :: GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
T17966.$trModule = GHC.Types.Module $trModule_sTK $trModule_sTM

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_aRp [InlPrag=[~]] :: GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
$krep_aRp
  = GHC.Types.KindRepFun GHC.Types.krep$* GHC.Types.krep$Constraint

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_aRo [InlPrag=[~]] :: GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
$krep_aRo = GHC.Types.KindRepFun GHC.Types.krep$* $krep_aRp

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcC_sTN :: GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 20 0}]
$tcC_sTN = "C"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcC_sTO :: GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
$tcC_sTO = GHC.Types.TrNameS $tcC_sTN

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
T17966.$tcC :: GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
T17966.$tcC
  = GHC.Types.TyCon
      12503088876068780286#Word64
      926716241154773768#Word64
      T17966.$trModule
      $tcC_sTO
      0#
      $krep_aRo

-- RHS size: {terms: 10, types: 7, coercions: 0, joins: 0/0}
x :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=False, ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 120 0}]
x = f @Bool
      @()
      @(Maybe Integer)
      (T17966.$fCBoolb @() GHC.Show.$fShowUnit)
      (GHC.Show.$fShowMaybe @Integer GHC.Show.$fShowInteger)
      GHC.Types.True
      GHC.Tuple.Prim.()
      (GHC.Maybe.Just @Integer (GHC.Num.Integer.IS 42#))



