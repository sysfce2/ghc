f :: forall (a :: * -> *) b. C a => a b
f :: forall (a :: * -> *) b. C a => a b
f :: forall (a :: * -> *) b. C a => a b
f :: forall (a :: * -> *) b. C a => a b
f :: forall (a :: * -> *) b. C a => a b
f :: forall (a :: * -> *) b. C a => a b
f ∷ ∀ (a ∷ ★ → ★) b. C a ⇒ a b
f ∷ ∀ (a ∷ ★ → ★) b. C a ⇒ a b
f ∷ ∀ (a ∷ ★ → ★) b. C a ⇒ a b
f ∷ ∀ (a ∷ ★ → ★) b. C a ⇒ a b
f ∷ ∀ (a ∷ ★ → ★) b. C a ⇒ a b
f ∷ ∀ (a ∷ ★ → ★) b. C a ⇒ a b
fmap ∷ ∀ (f ∷ ★ → ★) a b. Functor f ⇒ (a → b) → f a → f b
type Functor :: (★ → ★) → Constraint
class Functor f where
  fmap ∷ ∀ a b. (a → b) → f a → f b
  ...
  	-- Defined in ‘base-4.18.0.0:GHC.Base.Functor’
Functor ∷ (★ → ★) → Constraint
type Functor :: (★ → ★) → Constraint
class Functor f where
  fmap ∷ ∀ a b. (a → b) → f a → f b
  (<$) ∷ ∀ a b. a → f b → f a
  {-# MINIMAL fmap #-}
  	-- Defined in ‘base-4.18.0.0:GHC.Base.Functor’
instance ∀ r. Functor ((->) r)
  -- Defined in ‘base-4.18.0.0:GHC.Base.Functor’
instance Functor IO -- Defined in ‘base-4.18.0.0:GHC.Base.Functor’
instance Functor [] -- Defined in ‘base-4.18.0.0:GHC.Base.Functor’
instance Functor Maybe
  -- Defined in ‘base-4.18.0.0:GHC.Base.Functor’
instance Functor Solo
  -- Defined in ‘base-4.18.0.0:GHC.Base.Functor’
instance ∀ a. Functor ((,) a)
  -- Defined in ‘base-4.18.0.0:GHC.Base.Functor’
instance ∀ a b. Functor ((,,) a b)
  -- Defined in ‘base-4.18.0.0:GHC.Base.Functor’
instance ∀ a b c. Functor ((,,,) a b c)
  -- Defined in ‘base-4.18.0.0:GHC.Base.Functor’
instance ∀ a b c d. Functor ((,,,,) a b c d)
  -- Defined in ‘base-4.18.0.0:GHC.Base.Functor’
instance ∀ a b c d e. Functor ((,,,,,) a b c d e)
  -- Defined in ‘base-4.18.0.0:GHC.Base.Functor’
instance ∀ a b c d e f. Functor ((,,,,,,) a b c d e f)
  -- Defined in ‘base-4.18.0.0:GHC.Base.Functor’
instance ∀ a. Functor (Either a) -- Defined in ‘Data.Either’
instance ∀ (f ∷ ★ → ★) (g ∷ ★ → ★).
         (Functor f, Functor g) ⇒
         Functor (f :*: g)
  -- Defined in ‘GHC.Generics’
instance ∀ (f ∷ ★ → ★) (g ∷ ★ → ★).
         (Functor f, Functor g) ⇒
         Functor (f :+: g)
  -- Defined in ‘GHC.Generics’
instance ∀ (f ∷ ★ → ★) (g ∷ ★ → ★).
         (Functor f, Functor g) ⇒
         Functor (f :.: g)
  -- Defined in ‘GHC.Generics’
instance ∀ (f ∷ ★ → ★).
         (Generic1 f, Functor (Rep1 f)) ⇒
         Functor (Generically1 f)
  -- Defined in ‘GHC.Generics’
instance ∀ i c. Functor (K1 i c) -- Defined in ‘GHC.Generics’
instance ∀ i (c ∷ Meta) (f ∷ ★ → ★). Functor f ⇒ Functor (M1 i c f)
  -- Defined in ‘GHC.Generics’
instance Functor Par1 -- Defined in ‘GHC.Generics’
instance ∀ (f ∷ ★ → ★). Functor f ⇒ Functor (Rec1 f)
  -- Defined in ‘GHC.Generics’
instance Functor U1 -- Defined in ‘GHC.Generics’
instance Functor (URec Char) -- Defined in ‘GHC.Generics’
instance Functor (URec Double) -- Defined in ‘GHC.Generics’
instance Functor (URec Float) -- Defined in ‘GHC.Generics’
instance Functor (URec Int) -- Defined in ‘GHC.Generics’
instance Functor (URec Word) -- Defined in ‘GHC.Generics’
instance Functor V1 -- Defined in ‘GHC.Generics’
datatypeName
  ∷ ∀ {k} (d ∷ k) k1 (t ∷ k → (k1 → ★) → k1 → ★) (f ∷ k1 → ★)
      (a ∷ k1).
    Datatype d ⇒
    t d f a → [Char]
type Datatype :: ∀ {k}. k → Constraint
class Datatype d where
  datatypeName ∷ ∀ k1 (t ∷ k → (k1 → ★) → k1 → ★) (f ∷ k1 → ★)
                   (a ∷ k1).
                 t d f a → [Char]
  ...
  	-- Defined in ‘GHC.Generics’
(:*:)
  ∷ ∀ k (f ∷ k → ★) (g ∷ k → ★) (p ∷ k). f p → g p → (:*:) f g p
Rep ∷ ★ → ★ → ★
M1 ∷ ∀ k. ★ → Meta → (k → ★) → k → ★
